<%
if not 'rs' in shared:
    def fish(t, *args):
        if args:
            return '{}<{}>'.format(t, ', '.join(args))
        else:
            return t

    def ref(t, lifetime=None):
        if lifetime:
            return "&'{} {}".format(lifetime, t)
        else:
            return '&{}'.format(t)

    def mut(t, lifetime=None):
        if lifetime:
            return "&'{} mut {}".format(lifetime, t)
        else:
            return '&mut {}'.format(t)

    def option(t):
        return fish('Option', t)

    def rc(t):
        return fish('std::rc::Rc', t)

    def vec(t):
        return fish('Vec', t)

    def slice(t):
        return '[{}]'.format(t)

    def hashmap(k, v):
        return fish('std::collections::HashMap', k, v)

    def owned_type(ty):
        name = ty['name']

        if name == 'null':
            result = '()'

        elif name == 'boolean':
            result = 'bool'

        elif name == 'int':
            result = 'i64'

        elif name == 'float':
            result = 'f64'

        elif name == 'string':
            result = 'Str'

        elif name == 'list':
            result = fish('List', owned_type(ty['valueType']))

        elif name == 'dictionary':
            result = fish(
                'Map', 
                owned_type(ty['keyType']),
                owned_type(ty['valueType']),
            )

        elif ty['is_game_object']:
            result = name

        else:
            raise Exception(name)

        if ty['nullable']:
            result = option(result)

        return result

    def arg_type(ty):
        name = ty['name']

        if name == 'null':
            result = '()'

        elif name == 'boolean':
            result = 'bool'

        elif name == 'int':
            result = 'i64'

        elif name == 'float':
            result = 'f64'

        elif name == 'string':
            result = ref('str')

        elif name == 'list':
            result = ref(slice(owned_type(ty['valueType'])))

        elif name == 'dictionary':
            result = ref(fish(
                'Map',
                owned_type(ty['keyType']),
                owned_type(ty['valueType']),
            ))

        elif ty['is_game_object']:
            result = ref(name)

        else:
            raise Exception(name)

        if ty['nullable']:
            result = option(result)

        return result

    def return_type(ty):
        return owned_type(ty)

    def default_value(ty, value):
        if value == None:
            if ty['nullable']:
                return 'None'
            elif ty['name'] == 'null':
                return '()'
            else:
                raise Exception("Can't parse default value")
        elif ty['name'] in ['boolean', 'int', 'float']:
            return str(value)
        else:
            raise Exception("Can't parse default value")

    def sanitize(name):
        if name == 'move':
            return 'move_to'
        elif name == 'type':
            return 'type_of'
        else:
            return name

    def lines(text, max_length):
        import textwrap 

        result = []
        for paragraph in text.split('\n'):
            if paragraph:
                result.extend(textwrap.wrap(paragraph, max_length))
            else:
                result.append('')
        return result

    def prefix_lines(text, prefix, max_line_length=99):
        return '\n'.join(
            (prefix + line).rstrip()
            for line in lines(text, max_line_length - len(prefix))
        )

    import re
    re_null = re.compile('null', re.IGNORECASE)

    def rustify(text):
        text = re_null.sub('None', text)
        return text

    def obj_doc(obj, prefix):
        return prefix_lines(rustify(obj['description']), prefix)

    def attr_doc(attr, parent, prefix):
        text = attr['description']

        if parent:
            text = '_Inherited from {}_\n\n'.format(parent) + text

        return prefix_lines(rustify(text), prefix)

    def func_doc(func, parent, prefix):
        text = func['description']

        if func['arguments']:
            text += '\n\n# Arguments'
            for arg in func['arguments']:
                text += '\n\n- _{}_ - {}'.format(
                    sanitize(underscore(arg['name'])),
                    arg['description'],
                )

        if func['returns']:
            text += '\n\n# Returns\n\n{}'.format(
                func['returns']['description'],
            )

        if parent:
            text = '_Inherited from {}_\n\n'.format(parent) + text

        return prefix_lines(rustify(text), prefix)

    def all_attributes(obj):
        for name, attr in obj['attributes'].items():
            yield name, attr, None

        for parent in all_parents(obj):
            for name, attr in game_objs[parent]['attributes'].items():
                yield name, attr, parent

    def all_functions(obj):
        for name, func in obj['functions'].items():
            yield name, func, None

        for parent in all_parents(obj):
            for name, func in game_objs[parent]['functions'].items():
                yield name, func, parent

    def all_parents(obj):
        from collections import OrderedDict

        # Special logic to sort parents topologically for nice documentation ordering.
        # Direct parents are ordered first, then the next level, etc.
        # Last will be the top level, such as GameObject

        parents = OrderedDict()
        for parent in obj['parentClasses']:
            parents[parent] = None

        for parent in obj['parentClasses']:
            for parent in all_parents(game_objs[parent]):
                # We explicitly delete here to move it to the back.
                # Inserting an existing key doesn't move it, per the docs.
                if parent in parents:
                    del parents[parent]
                parents[parent] = None

        return list(parents)

    shared['rs'] = {
        'return_type': return_type,
        'arg_type': arg_type,
        'default_value': default_value,
        'sanitize': sanitize,
        'obj_doc': obj_doc,
        'attr_doc': attr_doc,
        'func_doc': func_doc,
        'all_attributes': all_attributes,
        'all_functions': all_functions,
        'all_parents': all_parents,
    }
%>\
